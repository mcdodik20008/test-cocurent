3. Реализация ограниченного пула соединений
Описание: Напиши класс для управления пулом соединений с базой данных.

Максимальное количество соединений ограничено.
Если все соединения заняты, запрос должен ожидать освобождения.
Поддерживай методы для получения и освобождения соединений.
Ключевые моменты:

Используй Semaphore для ограничения доступа.
Учитывай тайм-ауты при ожидании соединения.


Теория и рекомендации для выполнения задачи "Реализация ограниченного пула соединений"
1. Что такое пул соединений
Пул соединений — это объект, который управляет ограниченным количеством ресурсов (например, соединениями с базой данных). Цель пула:

Ограничить количество активных соединений.
Повторно использовать соединения для повышения производительности.
Блокировать запросы на соединения, если лимит исчерпан.
В Java пул соединений можно создать с использованием таких инструментов, как BlockingQueue, Semaphore, или встроенных фреймворков (например, HikariCP).

2. Рекомендации по реализации пула соединений
Потокобезопасность:

Все операции, связанные с запросом и возвратом соединения, должны быть синхронизированы.
Используй Semaphore для ограничения доступа к ресурсам.
Поведение при отсутствии соединений:

Блокировать поток до освобождения ресурса.
Реализовать тайм-аут ожидания.
Повторное использование ресурсов:

Храни соединения в коллекции (например, BlockingQueue), чтобы повторно выдавать освобожденные соединения.
Закрытие пула:

Реализуй метод, который закрывает все соединения при завершении работы приложения.
3. Пример реализации пула соединений
java
Копировать код
import java.util.concurrent.*;
import java.util.*;

class Connection {
    private final int id;

    public Connection(int id) {
        this.id = id;
    }

    public void connect() {
        System.out.println("Connection " + id + " is active.");
    }

    public void disconnect() {
        System.out.println("Connection " + id + " is closed.");
    }
}

class ConnectionPool {
    private final BlockingQueue<Connection> pool;
    private final Semaphore semaphore;

    public ConnectionPool(int poolSize) {
        pool = new LinkedBlockingQueue<>(poolSize);
        semaphore = new Semaphore(poolSize);

        // Инициализация пула соединений
        for (int i = 1; i <= poolSize; i++) {
            pool.offer(new Connection(i));
        }
    }

    public Connection acquire() throws InterruptedException {
        // Блокируем, если нет доступных соединений
        semaphore.acquire();
        return pool.poll();
    }

    public void release(Connection connection) {
        if (connection != null) {
            pool.offer(connection);
            semaphore.release();
        }
    }

    public void shutdown() {
        // Закрытие всех соединений
        pool.forEach(Connection::disconnect);
        pool.clear();
    }
}

public class ConnectionPoolExample {
    public static void main(String[] args) {
        ConnectionPool connectionPool = new ConnectionPool(3);

        ExecutorService executor = Executors.newFixedThreadPool(5);

        // Моделирование работы с пулом
        for (int i = 1; i <= 10; i++) {
            final int taskId = i;
            executor.submit(() -> {
                try {
                    System.out.println("Task " + taskId + " is waiting for a connection...");
                    Connection connection = connectionPool.acquire();
                    try {
                        connection.connect();
                        Thread.sleep(1000); // Симуляция работы
                    } finally {
                        connectionPool.release(connection);
                        System.out.println("Task " + taskId + " released the connection.");
                    }
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            });
        }

        executor.shutdown();
        try {
            executor.awaitTermination(10, TimeUnit.SECONDS);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }

        connectionPool.shutdown();
    }
}
4. Пошаговое объяснение кода
Класс Connection:

Представляет объект соединения с базой данных.
У него есть методы connect() и disconnect() для демонстрации активации и закрытия соединения.
Класс ConnectionPool:

BlockingQueue: Хранит доступные соединения.
Semaphore: Ограничивает доступ к ресурсам, разрешая только заданное количество потоков одновременно использовать соединения.
Методы:
acquire(): Забирает соединение из пула, блокируя поток, если соединения недоступны.
release(): Возвращает соединение обратно в пул.
shutdown(): Закрывает все соединения в пуле.
Класс ConnectionPoolExample:

Использует ExecutorService для создания нескольких потоков, которые запрашивают соединения из пула.
Каждый поток получает соединение, работает с ним и возвращает его обратно.
5. Рекомендации
Используй тайм-аут для блокировки: В методе acquire() можно использовать метод semaphore.tryAcquire(timeout, unit) вместо semaphore.acquire() для обработки случаев, когда соединение не освобождается.
Проверяй ресурсы перед использованием: Добавь валидацию соединений (например, проверку статуса) перед выдачей их из пула.
Логи и мониторинг: Добавь логику для отслеживания количества активных соединений и обработки ошибок.
6. Идеи для усложнения задачи
Реализуй обработку исключений, когда соединение не возвращается в пул из-за сбоя.
Добавь автоматическое закрытие неактивных соединений через заданный промежуток времени.
Реализуй асинхронный интерфейс для получения соединений с использованием CompletableFuture.
Этот пример полностью демонстрирует основы пула соединений, и его можно адаптировать для различных случаев. Если нужна помощь в модификации, обращайся!